import os
import dotenv
import logging as log
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from charCreate import CharCreate
from r34nfag import Rule34NewForAnimeGooners

dotenv.load_dotenv()
log.basicConfig(level=log.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise Exception('TELEGRAM_BOT_TOKEN is missing in .env!')

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
char_creator = CharCreate()
rule34 = Rule34NewForAnimeGooners()

func_steps = [
    ("who", char_creator.choose_who),
    ("body_type", char_creator.choose_body_type),
    ("hair_style", char_creator.choose_hair_style),
    ("hair_color", char_creator.choose_hair_color),
    ("eyes", char_creator.choose_eyes),
    ("clothes", char_creator.choose_clothes),
    ("pose_action", char_creator.choose_pose_action),
    ("setting", char_creator.choose_setting),
    ("mood", char_creator.choose_mood),
    ("personality", char_creator.choose_personality),
    ("accessories_props", char_creator.choose_accessories_props),
    ("genre_theme", char_creator.choose_genre_theme),
    ("time_weather", char_creator.choose_time_weather),
    ("girls", char_creator.choose_girls),
    ("boys", char_creator.choose_boys)
]

class CharFSM(StatesGroup):
    step = State()
    result = State()

# --- NEW: –°–æ–≤–µ—Ç—ã –∏ –æ–±—É—á–∞–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
STEP_ADVICE = {
    "who":            "üßë‚Äçüé§ <b>–¢–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n–í—ã–±–µ—Ä–∏ 1-2 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞ –∏–ª–∏ —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –õ—É—á—à–µ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥! –ß–µ–º –ø—Ä–æ—â–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞–π–¥—ë—à—å!",
    "body_type":      "üí™ <b>–§–∏–≥—É—Ä–∞</b>\n–í—ã–¥–µ–ª–∏ 1‚Äì2 –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ (‚è≠Ô∏è), –µ—Å–ª–∏ –Ω–µ–≤–∞–∂–Ω–æ.",
    "hair_style":     "üíá‚Äç‚ôÄÔ∏è <b>–ü—Ä–∏—á—ë—Å–∫–∞</b>\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
    "hair_color":     "üé® <b>–¶–≤–µ—Ç –≤–æ–ª–æ—Å</b>\n–û–±—ã—á–Ω—ã–µ (—Ä—É—Å—ã–π, —á—ë—Ä–Ω—ã–π) –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —á–∞—â–µ. –ß–µ–º —ç–∫–∑–æ—Ç–∏—á–Ω–µ–µ ‚Äî —Ç–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞.",
    "eyes":           "üëÅ <b>–ì–ª–∞–∑–∞</b>\n–§–æ—Ä–º–∞/—Ü–≤–µ—Ç/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —Ç–æ–∂–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ß–µ–º –±–∞–Ω–∞–ª—å–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.",
    "clothes":        "üëó <b>–û–¥–µ–∂–¥–∞</b>\n–ò–∑–±–µ–≥–∞–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–∑ —Ä–µ–¥–∫–∏—Ö –∫–æ—Å—Ç—é–º–æ–≤, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –∞—Ä—Ç–æ–≤!",
    "pose_action":    "üï∫ <b>–ü–æ–∑–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n–õ—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
    "setting":        "üèô <b>–§–æ–Ω/–ú–µ—Å—Ç–æ</b>\n–≠—Ç–æ –º–æ–∂–Ω–æ —Å–º–µ–ª–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –Ω—É–∂–µ–Ω —Ñ–æ–Ω.",
    "mood":           "üòä <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b>\n–í–µ—Å—ë–ª—ã–π? –ì—Ä—É—Å—Ç–Ω—ã–π? –ò–ª–∏ –º–æ–∂–µ—Ç –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã?",
    "personality":    "üß† <b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b>\n–≠—Ç–æ –≤–ª–∏—è–µ—Ç —Å–ª–∞–±–æ ‚Äî –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
    "accessories_props": "üéí <b>–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã</b>\n–õ—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å 0-1 –≤–∞—Ä–∏–∞–Ω—Ç.",
    "genre_theme":    "üåü <b>–ñ–∞–Ω—Ä –∏–ª–∏ —Ç–µ–º–∞</b>\n–í—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.",
    "time_weather":   "‚òÄÔ∏è <b>–í—Ä–µ–º—è –¥–Ω—è/–ø–æ–≥–æ–¥–∞</b>\n–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.",
    "girls":          "üëß <b>–ñ–µ–Ω—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏</b>\n–ï—Å–ª–∏ —Ö–æ—Ç—è—Ç –≤–∏–¥–µ—Ç—å –Ω–∞ –∞—Ä—Ç–µ –¥–µ–≤—É—à–µ–∫.",
    "boys":           "üë¶ <b>–ú—É–∂—Å–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏</b>\n–ù—É –∏–ª–∏ –º–∞–ª—å—á–∏–∫–æ–≤!"
}

# --- Friendly –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
async def send_intro(message):
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞—Ä—Ç –Ω–∞ Rule34 –ø–æ —Ç–≤–æ–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "üîé <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤—ã–±–µ—Ä–∏ 1-2 –æ—Å–Ω–æ–≤–Ω—ã—Ö —á–µ—Ä—Ç—ã, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–µ!\n"
        "2. –ù–µ –ø—ã—Ç–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å –í–°–Å –ø–æ–¥—Ä—è–¥ ‚Äî —Ç–∞–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ—á—Ç–∏ –Ω–µ –±—ã–≤–∞–µ—Ç.\n"
        "3. –ï—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ ‚Äî —Å–º–µ–ª–æ –∂–º–∏ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å! –ß–µ–º –ø—Ä–æ—â–µ, —Ç–µ–º –ª—É—á—à–µ.\n"
        "4. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ‚Äî /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n\n"
        "–ì–æ—Ç–æ–≤? –ü–æ–≥–Ω–∞–ª–∏!\n",
        parse_mode="HTML")

def build_step_keyboard(group, idx, tags, idx_selected=None):
    max_btns = 4
    kb = []
    for i, tag in enumerate(tags):
        selected = idx_selected and i in idx_selected
        btn_text = f"‚úÖ {tag}" if selected else tag
        kb.append(InlineKeyboardButton(text=btn_text, callback_data=f"pick_{idx}_{i}"))
    arranged = [kb[j:j+max_btns] for j in range(0, len(kb), max_btns)]
    nav = []
    if idx > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{idx}"))
    nav.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"commit_{idx}"))
    nav.append(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{idx}"))
    nav.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    arranged.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=arranged)

async def send_step(message_obj, state: FSMContext, preview=False):
    data = await state.get_data()
    idx = data.get('step_index', 0)
    answers = data.get("answers", {})
    # --- –°–±–æ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è M–∏–¥—Å—Ç–µ–ø–∞
    prev_char = ""
    try:
        char_creator.char = ""
        for i in range(idx):
            group, func = func_steps[i]
            answer = answers.get(group)
            if answer is not None:
                # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ‚Äî –ø—Ä–æ—Ö–æ–¥–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
                if isinstance(answer, list):
                    for a in answer:
                        func(a)
                else:
                    func(answer)
        prev_char = char_creator.get_character()
    except Exception as e:
        prev_char = f"[–æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {e}]"
    if preview and prev_char:
        try:
            await message_obj.answer(
                f"üìù <b>–¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∫–∞:</b>\n<code>{prev_char or '‚Äî'}</code>",
                parse_mode="HTML"
            )
        except Exception:
            pass

    if idx >= len(func_steps):
        # --- –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
        char_creator.char = ""
        for i, (group, func) in enumerate(func_steps):
            ans = answers.get(group)
            if ans is not None:
                if isinstance(ans, list):
                    for a in ans:
                        func(a)
                else:
                    func(ans)
        desc = char_creator.get_character()
        if not desc.strip():
            await message_obj.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–µ—Ä—ã–≤–∞—é üò≠")
            await state.clear()
            return
        await message_obj.answer(
            f"üßë‚Äçüíª <b>–ì–æ—Ç–æ–≤–æ!</b> –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∞—Ä—Ç—ã:\n\n<code>{desc}</code>\n\n"
            "üîé <b>–í–∞–∂–Ω–æ:</b> –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è –Ω–∏—á–µ–≥–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å—É–∑–∏—Ç—å –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±—Ä–∞—Ç—å –ø–æ–º–µ–Ω—å—à–µ —Ä–µ–¥–∫–∏—Ö —Ç–µ–≥–æ–≤).",
            parse_mode="HTML"
        )

        posts = []
        for page in range(1, 6):   # 1..5 -> pid=0..4
            chunk = rule34.make_rule34_request(desc, pid=page-1, limit=10)
            if not isinstance(chunk, list) or not chunk:
                break
            posts.extend(chunk)
            if len(posts) >= 50:
                break
        posts = posts[:50]
        await state.set_state(CharFSM.result)
        await state.update_data(result_posts=posts, result_desc=desc, result_idx=0)
        await show_result(message_obj, state)
        return

    group, _ = func_steps[idx]
    try:
        all_tags = char_creator.get_tags()
        tags = all_tags[group]
    except Exception as e:
        await message_obj.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è <b>{group}</b>: {e}", parse_mode="HTML")
        await state.clear()
        return
    idx_selected = answers.get(group, [])
    if idx_selected is None:
        idx_selected = []
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—à–∞–≥–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    text = (f"–®–∞–≥ <b>{idx+1}/{len(func_steps)}</b>\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ <b>{group.replace('_', ' ').capitalize()}</b>:")
    advice = STEP_ADVICE.get(group, "")
    if advice:
        text += f"\n\n{advice}"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–ª(–∞)
    if idx_selected:
        sel_txt = ", ".join(tags[i] for i in idx_selected if 0 <= i < len(tags))
        text += f"\n\n<b>–¢—ã –≤—ã–±—Ä–∞–ª(–∞):</b> <code>{sel_txt or '‚Äî'}</code>"
    # –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    text += ("\n\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ</b> –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ‚è≠Ô∏è –µ—Å–ª–∏ –Ω–µ–≤–∞–∂–Ω–æ!\n"
             "<i>–ß–µ–º –ø—Ä–æ—â–µ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.</i>")
    kb = build_step_keyboard(group, idx, tags, idx_selected=idx_selected)
    await message_obj.answer(text, parse_mode="HTML", reply_markup=kb)

async def show_result(message_or_call, state: FSMContext, edit=False):
    data = await state.get_data()
    resp = data.get('result_posts', [])
    desc = data.get('result_desc', "")
    idx = data.get('result_idx', 0)
    total = len(resp)
    if not resp:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="result_edit")],
                [InlineKeyboardButton(text="‚ùì –°–æ–≤–µ—Ç—ã", callback_data="help_tips")]
            ]
        )
        await send_result_message(
            message_or_call,
            "üò¢ <b>–ö–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?\n"
            "‚Äî –£–±–µ—Ä–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞–ª–æ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ (—Ü–≤–µ—Ç, –ø—Ä–µ–¥–º–µ—Ç—ã, –ø–æ–∑–∞ –∏ —Ç.–¥.)\n"
            "‚Äî –ö–æ–º–±–∏–Ω–∏—Ä—É–π –ø–æ –ø–∞—Ä–µ —Ñ–∏—á ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ '—Ç–∏–ø' –∏ '—Ü–≤–µ—Ç –≤–æ–ª–æ—Å'.\n"
            "‚Äî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!\n",
            kb, edit
        )
        return
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
    post = resp[idx]
    img_url = post.get("file_url") or post.get("sample_url")
    nav = []
    if idx > 0:
        nav.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='result_prev'))
    if idx < total - 1:
        nav.append(InlineKeyboardButton(text='‚è≠Ô∏è –î–∞–ª–µ–µ', callback_data='result_next'))
    nav.append(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="result_edit"))
    nav.append(InlineKeyboardButton(text="‚ùì –°–æ–≤–µ—Ç—ã", callback_data="help_tips"))
    kb = InlineKeyboardMarkup(inline_keyboard=[nav])
    caption = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: {idx+1} –∏–∑ {total}</b>\n"
        f"<code>{desc}</code>\n"
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ‚¨ÖÔ∏è –∏–ª–∏ ‚è≠Ô∏è.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏ ‚Äî –Ω–∞–∂–º–∏ ‚úèÔ∏è\n"
    )
    await send_result_message(message_or_call, caption, kb, edit, img_url)

async def send_result_message(message_or_call, caption, kb, edit, img_url=None):
    msg = message_or_call.message if isinstance(message_or_call, types.CallbackQuery) else message_or_call
    if edit and img_url:
        try:
            await msg.edit_media(
                types.InputMediaPhoto(media=img_url, caption=caption, parse_mode="HTML"),
                reply_markup=kb
            )
        except Exception:
            await msg.edit_caption(caption=caption, parse_mode="HTML", reply_markup=kb)
    elif edit:
        await msg.edit_caption(caption=caption, parse_mode="HTML", reply_markup=kb)
    else:
        if img_url:
            await msg.answer_photo(img_url, caption=caption, parse_mode="HTML", reply_markup=kb)
        else:
            await msg.answer(caption, parse_mode="HTML", reply_markup=kb)

# --- STEP NAVIGATION ---
@dp.callback_query(F.data.startswith("pick_"))
async def pick_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 3: await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏."); return
    idx = int(parts[1])
    val = int(parts[2])
    data = await state.get_data()
    answers = data.get("answers", {})
    group, _= func_steps[idx]
    selected = answers.get(group, [])
    if selected is None: selected = []
    if val in selected:
        selected.remove(val)
    else:
        selected.append(val)
    answers[group] = selected
    await state.update_data(step_index=idx, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data.startswith("commit_"))
async def commit_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 2: await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏."); return
    idx = int(parts[1])
    await state.update_data(step_index=idx+1)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data.startswith("skip_"))
async def skip_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 2: return await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
    idx = int(parts[1])
    data = await state.get_data()
    answers = data.get("answers", {})
    group, _= func_steps[idx]
    answers[group] = None
    await state.update_data(step_index=idx + 1, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data.startswith("prev_"))
async def prev_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 2: return await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
    idx = int(parts[1])
    if idx == 0:
        await call.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥!")
        return
    data = await state.get_data()
    answers = data.get("answers", {})
    await state.update_data(step_index=idx - 1, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data == "cancel")
async def cancel_cb_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try: await call.message.delete()
    except Exception: pass
    await call.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ñ–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ! üîÑ")

# --- RESULT NAVIGATION ---
@dp.callback_query(F.data.in_({"result_next", "result_prev"}))
async def cb_result_nav(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data.get("result_idx", 0)
    total = len(data.get('result_posts', []))
    if call.data == "result_next":
        if idx >= total - 1:
            await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        else:
            await state.update_data(result_idx=idx + 1)
            await call.answer()
            await show_result(call, state, edit=True)
    else:
        if idx <= 0:
            await call.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        else:
            await state.update_data(result_idx=idx - 1)
            await call.answer()
            await show_result(call, state, edit=True)

@dp.callback_query(F.data == "result_edit")
async def cb_result_edit(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    await state.set_state(CharFSM.step)
    await state.update_data(
        step_index=len(func_steps)-1,
        answers=answers
    )
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data == "help_tips")
async def cb_help_tips(call: CallbackQuery, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø—Ä—è–º–æ –∏–∑ UX!
    await call.answer()
    await call.message.answer(
        "<b>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ Rule34!</b>\n"
        "‚Ä¢ –ù–µ –ø—ã—Ç–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "‚Ä¢ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞, –Ω–µ –±–æ–ª—å—à–µ.\n"
        "‚Ä¢ –ß–µ–º –ø—Ä–æ—â–µ –ø–µ—Ä—Å–æ–Ω–∞–∂, —Ç–µ–º —Å–∫–æ—Ä–µ–µ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥—ë—Ç—Å—è.\n"
        "‚Ä¢ –°–º–µ–ª–µ–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π! –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ ‚Äî –≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ, —á–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥.\n",
        parse_mode="HTML"
    )
    await call.message.answer("–ñ–º–∏ /start —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")

# --- –°–¢–ê–†–¢ ---
@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CharFSM.step)
    await state.update_data(step_index=0, answers={})
    await send_intro(message)
    await send_step(message, state, preview=True)

@dp.message(Command('reset'))
async def cmd_reset(message: types.Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

@dp.message(Command('cancel'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ñ–º–∏ /start –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞! üîÅ")

@dp.message(Command('preview'))
async def cmd_preview(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    char_creator.char = ""
    for i, (group, func) in enumerate(func_steps):
        ans = answers.get(group)
        if ans is not None:
            try: func(ans)
            except Exception: pass
    desc = char_creator.get_character()
    await message.answer(f"üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: <code>{desc or '[–Ω–µ –≤—ã–±—Ä–∞–Ω]'}</code>", parse_mode="HTML")

@dp.message(Command('help'))
async def cmd_help(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ö°Ô∏è <b>–°–ø—Ä–∞–≤–∫–∞:</b>\n"
        "1. –õ—É—á—à–µ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–≥–æ–≤!\n"
        "2. –í–∞–∂–Ω–æ: —á–µ–º –º–µ–Ω—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏—á, —Ç–µ–º –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Rule34.\n"
        "3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!\n"
        "\n–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞/—Å–æ–≤–µ—Ç—ã\n"
        "/cancel ‚Äî –≤—ã–π—Ç–∏\n",
        parse_mode="HTML"
    )

@dp.message()
async def unknown_cmd(message: types.Message, state: FSMContext):
    await message.answer("üö¶ –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ñ–º–∏ /start —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤—ã–±–∏—Ä–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –∏ –ø–æ–ª—É—á–∞–π –∞—Ä—Ç—ã!).")

if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot))