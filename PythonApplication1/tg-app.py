import os
import dotenv
import logging as log
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from charCreate import CharCreate
from r34nfag import Rule34NewForAnimeGooners

# --- INIT ---
dotenv.load_dotenv()
log.basicConfig(level=log.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise Exception('TELEGRAM_BOT_TOKEN is missing in .env!')
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
char_creator = CharCreate()
rule34 = Rule34NewForAnimeGooners()

# --- FSM STATE ---
class CharFSM(StatesGroup):
    step = State()
    result = State()
    wait_tags = State()

# --- STEPS ---
func_steps = [
    ("who", char_creator.choose_who),
    ("body_type", char_creator.choose_body_type),
    ("hair_style", char_creator.choose_hair_style),
    ("hair_color", char_creator.choose_hair_color),
    ("eyes", char_creator.choose_eyes),
    ("clothes", char_creator.choose_clothes),
    ("pose_action", char_creator.choose_pose_action),
    ("setting", char_creator.choose_setting),
    ("mood", char_creator.choose_mood),
    ("personality", char_creator.choose_personality),
    ("accessories_props", char_creator.choose_accessories_props),
    ("genre_theme", char_creator.choose_genre_theme),
    ("time_weather", char_creator.choose_time_weather),
    ("girls", char_creator.choose_girls),
    ("boys", char_creator.choose_boys)
]

STEP_ADVICE = {
    "who":            "üßë‚Äçüé§ <b>–¢–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n–í—ã–±–µ—Ä–∏ 1-2 —Ç–∏–ø–∞ (–Ω–µ –≤—Å—ë –ø–æ–¥—Ä—è–¥, –±–∞–Ω–∞–ª—å–Ω–æ = –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).",
    "body_type":      "üí™ <b>–§–∏–≥—É—Ä–∞</b>\n–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ.",
    "hair_style":     "üíá‚Äç‚ôÄÔ∏è <b>–ü—Ä–∏—á—ë—Å–∫–∞</b>\n–í—ã–±–µ—Ä–∏ 1-2 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏.",
    "hair_color":     "üé® <b>–¶–≤–µ—Ç –≤–æ–ª–æ—Å</b>\n–û–±—ã—á–Ω—ã–π = –±–æ–ª—å—à–µ –∞—Ä—Ç–æ–≤, —Ä–µ–¥–∫–∏–π —Ü–≤–µ—Ç–∞ ‚Äî –º–µ–Ω—å—à–µ.",
    "eyes":           "üëÅ <b>–ì–ª–∞–∑–∞</b>\n–§–æ—Ä–º–∞/—Ü–≤–µ—Ç: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.",
    "clothes":        "üëó <b>–û–¥–µ–∂–¥–∞</b>\n–ù–µ —Å–º–µ—à–∏–≤–∞–π —Ä–µ–¥–∫–æ–µ —Å —Ä–µ–¥–∫–∏–º ‚Äî –ø—Ä–æ—â–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –±–∞–Ω–∞–ª—å–Ω–æ–µ.",
    "pose_action":    "üï∫ <b>–ü–æ–∑–∞/–¥–µ–π—Å—Ç–≤–∏–µ</b>\n–õ—É—á—à–µ —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ ‚Äî –∏–ª–∏ ‚è≠Ô∏è.",
    "setting":        "üèô <b>–§–æ–Ω</b>\n–ü—Ä–æ–ø—É—Å–∫–∞–π, –µ—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –≤–∞–∂–µ–Ω.",
    "mood":           "üòä <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b>\n–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã? –ñ–º–∏ ‚è≠Ô∏è.",
    "personality":    "üß† <b>–•–∞—Ä–∞–∫—Ç–µ—Ä</b>\n–ú–æ–∂–Ω–æ —Å–º–µ–ª–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.",
    "accessories_props": "üéí <b>–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</b>\n–û—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
    "genre_theme":    "üåü <b>–ñ–∞–Ω—Ä/—Ç–µ–º–∞</b>\n–í–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä—è–º —Ö–æ—á–µ—à—å.",
    "time_weather":   "‚òÄÔ∏è <b>–í—Ä–µ–º—è/–ø–æ–≥–æ–¥–∞</b>\n–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
    "girls":          "üëß <b>–î–µ–≤—É—à–∫–∏</b>\n–ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ.",
    "boys":           "üë¶ <b>–ú–∞–ª—å—á–∏–∫–∏</b>\n–¢–æ –∂–µ —Å–∞–º–æ–µ!"
}

# --- HELPER: –í–∏–¥–µ–æ —ç—Ç–æ? ---
def is_video_file(url: str):
    return bool(url and re.search(r'\.(mp4|webm)(\?|$)', url, re.I))

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à–∞–≥–∞ ---
def build_step_keyboard(group, idx, tags, idx_selected=None, total_steps=len(func_steps)):
    max_btns = 4
    kb = []
    idx_selected = idx_selected or []
    for i, tag in enumerate(tags):
        selected = (i in idx_selected)
        btn_text = f"‚úÖ {tag}" if selected else tag
        kb.append(InlineKeyboardButton(
            text=btn_text, callback_data=f"pick_{idx}_{i}"
        ))
    arranged = [kb[j:j + max_btns] for j in range(0, len(kb), max_btns)]
    nav1 = []
    if idx > 0:
        nav1.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{idx}"))
    nav1.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"commit_{idx}"))
    nav1.append(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{idx}"))
    if idx > 0:
        nav1.append(InlineKeyboardButton(text="üè† –ö –Ω–∞—á–∞–ª—É", callback_data="go_first"))
    nav2 = [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data=f"clear_{idx}")
    ]
    if idx < total_steps - 1:
        nav2.append(InlineKeyboardButton(text="‚è© –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–ø—É—Å–∫", callback_data="skip_all"))
    arranged.append(nav1)
    arranged.append(nav2)
    return InlineKeyboardMarkup(inline_keyboard=arranged)

# --- –í–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ---
async def send_intro(message):
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞—Ä—Ç –Ω–∞ Rule34 –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "üîé –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤—ã–±–∏—Ä–∞–π 1-2 –ø—Ä–∏–∑–Ω–∞–∫–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –∞—Ä—Ç—ã!\n"
        "‚è© <b>–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–ø—É—Å–∫</b> ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞–Ω–¥–æ–º.\n"
        "‚è≠Ô∏è ‚Äî –ø—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ. /cancel ‚Äî –≤—ã–π—Ç–∏.\n"
        "üè† ‚Äî –≤ –Ω–∞—á–∞–ª–æ, üóë ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä. –ü–æ–µ—Ö–∞–ª–∏! ‚ö°Ô∏è",
        parse_mode="HTML")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–≥ ---
async def send_step(message_obj, state: FSMContext, preview=False):
    data = await state.get_data()
    idx = data.get('step_index', 0)
    answers = data.get("answers", {})
    prev_char = ""
    try:
        char_creator.char = ""
        for i in range(idx):
            group, func = func_steps[i]
            answer = answers.get(group)
            if answer is not None:
                if isinstance(answer, list):
                    for a in answer:
                        func(a)
                else:
                    func(answer)
        prev_char = char_creator.get_character()
    except Exception as e:
        prev_char = f"[–æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {e}]"
    # –∫–æ–Ω–µ—Ü
    if idx >= len(func_steps):
        char_creator.char = ""
        for i, (group, func) in enumerate(func_steps):
            ans = answers.get(group)
            if ans is not None:
                if isinstance(ans, list):
                    for a in ans:
                        func(a)
                else:
                    func(ans)
        desc = char_creator.get_character()
        if not desc.strip():
            await message_obj.answer("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–µ—Ä—ã–≤–∞—é üò≠")
            await state.clear()
            return
        await message_obj.answer(
            f"üßë‚Äçüíª <b>–ì–æ—Ç–æ–≤–æ!</b> –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\n<code>{desc}</code>",
            parse_mode="HTML"
        )
        posts = []
        for page in range(1, 6):
            chunk = rule34.make_rule34_request(desc, pid=page-1, limit=10)
            if not isinstance(chunk, list) or not chunk:
                break
            posts.extend(chunk)
            if len(posts) >= 50:
                break
        posts = posts[:50]
        await state.set_state(CharFSM.result)
        await state.update_data(result_posts=posts, result_desc=desc, result_idx=0)
        await show_result(message_obj, state)
        return
    group, _= func_steps[idx]
    try:
        all_tags = char_creator.get_tags()
        tags = all_tags[group]
    except Exception as e:
        await message_obj.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è <b>{group}</b>: {e}", parse_mode="HTML")
        await state.clear()
        return
    idx_selected = answers.get(group, [])
    if idx_selected is None:
        idx_selected = []
    text = f"–®–∞–≥ <b>{idx+1}/{len(func_steps)}</b> ‚Äî <b>{group.replace('_', ' ').capitalize()}</b>\n"
    advice = STEP_ADVICE.get(group, "")
    if advice: text += f"{advice}\n"
    if idx_selected:
        sel_txt = ", ".join(tags[i] for i in idx_selected if 0 <= i < len(tags))
        text += f"\n<b>–í—ã–±—Ä–∞–Ω–æ:</b> <code>{sel_txt or '‚Äî'}</code>\n"
    text += "\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç(—ã) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ üëâ"
    kb = build_step_keyboard(group, idx, tags, idx_selected=idx_selected, total_steps=len(func_steps))
    if preview and prev_char:
        text += f"\n\n<i>–ü—Ä–µ–≤—å—é:</i> <code>{prev_char or '‚Äî'}</code>"
    try:
        await message_obj.edit_text(text, parse_mode="HTML", reply_markup=kb)
        return
    except Exception:
        pass
    await message_obj.answer(text, parse_mode="HTML", reply_markup=kb)

# --- –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä ---
@dp.callback_query(F.data.startswith("clear_"))
async def clear_selection(call: CallbackQuery, state: FSMContext):
    parts = call.data.split("_")
    if len(parts) != 2: return await call.answer("–æ—à–∏–±–∫–∞!")
    idx = int(parts[1])
    data = await state.get_data()
    answers = data.get("answers", {})
    group, _= func_steps[idx]
    answers[group] = []
    await state.update_data(step_index=idx, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

# --- –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä —Ç–µ–≥–∞ ---
@dp.callback_query(F.data.startswith("pick_"))
async def pick_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 3: await call.answer("–æ—à–∏–±–∫–∞!"); return
    idx = int(parts[1])
    val = int(parts[2])
    data = await state.get_data()
    answers = data.get("answers", {})
    group, _= func_steps[idx]
    selected = answers.get(group, [])
    if selected is None: selected = []
    if val in selected:
        selected.remove(val)
    else:
        selected.append(val)
    answers[group] = selected
    await state.update_data(step_index=idx, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data.startswith("commit_"))
async def commit_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 2: await call.answer("–æ—à–∏–±–∫–∞!"); return
    idx = int(parts[1])
    await state.update_data(step_index=idx+1)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

# --- SKIP ---
@dp.callback_query(F.data.startswith("skip_"))
async def skip_handler(call: CallbackQuery, state: FSMContext):
    if call.data == "skip_all":
        data = await state.get_data()
        idx = data.get('step_index', 0)
        answers = data.get("answers", {})
        for i in range(idx, len(func_steps)):
            group, _= func_steps[i]
            if group not in answers:
                answers[group] = None
        await state.update_data(step_index=len(func_steps), answers=answers)
        try: await call.message.delete()
        except Exception: pass
        await send_step(call.message, state, preview=True)
        return
    parts = call.data.split("_")
    if len(parts) != 2: return await call.answer("–æ—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏.")
    try: idx = int(parts[1])
    except Exception: return await call.answer("–æ—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏.")
    data = await state.get_data()
    answers = data.get("answers", {})
    group, _= func_steps[idx]
    answers[group] = None
    await state.update_data(step_index=idx + 1, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

# --- –ö –Ω–∞—á–∞–ª—É ---
@dp.callback_query(F.data == "go_first")
async def go_first_handler(call: CallbackQuery, state: FSMContext):
    await state.update_data(step_index=0)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

# --- prev ---
@dp.callback_query(F.data.startswith("prev_"))
async def prev_handler(call: CallbackQuery, state: FSMContext):
    parts = call.data.split('_')
    if len(parts) != 2: return await call.answer("–æ—à–∏–±–∫–∞!")
    idx = int(parts[1])
    if idx == 0:
        await call.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥!")
        return
    data = await state.get_data()
    answers = data.get("answers", {})
    await state.update_data(step_index=idx - 1, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data == "cancel")
async def cancel_cb_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try: await call.message.delete()
    except Exception: pass
    await call.message.answer("—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –∂–º–∏ /start ‚Äî –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!")

# --- –†–ï–ó–£–õ–¨–¢–ê–¢ ---
async def show_result(message_or_call, state: FSMContext, edit=False):
    data = await state.get_data()
    resp = data.get('result_posts', [])
    desc = data.get('result_desc', "")
    idx = data.get('result_idx', 0)
    total = len(resp)
    if not resp:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="result_edit")],
                [InlineKeyboardButton(text="‚ùì –°–æ–≤–µ—Ç—ã", callback_data="help_tips")]
            ]
        )
        await send_result_message(
            message_or_call,
            "üò¢ <b>–ö–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –º–∞–ª–æ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏. –ß–µ–º –ø—Ä–æ—â–µ –Ω–∞–±–æ—Ä ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö!",
            kb, edit
        )
        return
    post = resp[idx]
    img_url = post.get("file_url") or post.get("sample_url")
    is_video = is_video_file(img_url)
    nav1 = []
    if idx > 0:
        nav1.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='result_prev'))
    if idx < total - 1:
        nav1.append(InlineKeyboardButton(text='‚è≠Ô∏è –î–∞–ª–µ–µ', callback_data='result_next'))
    nav2 = [
        InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ç–µ–≥–∏", callback_data="result_extra_tags"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="result_edit"),
        InlineKeyboardButton(text="‚ùì –°–æ–≤–µ—Ç—ã", callback_data="help_tips")
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=[nav1, nav2])
    caption = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç: {idx+1} –∏–∑ {total}</b>\n"
        f"<code>{desc}</code>\n"
        "\n–ù–∞–≤–∏–≥–∞—Ü–∏—è: ‚¨ÖÔ∏è/‚è≠Ô∏è ‚Ä¢ üìù ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ç–µ–≥–∏."
    )
    await send_result_message(message_or_call, caption, kb, edit, img_url, is_video)

async def send_result_message(message_or_call, caption, kb, edit, file_url=None, is_video=False):
    msg = message_or_call.message if isinstance(message_or_call, CallbackQuery) else message_or_call
    if not file_url:
        await msg.answer(caption, parse_mode="HTML", reply_markup=kb)
        return
    if edit:
        if is_video:
            media = types.InputMediaVideo(media=file_url, caption=caption, parse_mode="HTML")
        else:
            media = types.InputMediaPhoto(media=file_url, caption=caption, parse_mode="HTML")
        try:
            await msg.edit_media(media, reply_markup=kb)
        except Exception:
            await msg.edit_caption(caption=caption, parse_mode="HTML", reply_markup=kb)
    else:
        if is_video:
            await msg.answer_video(file_url, caption=caption, parse_mode="HTML", reply_markup=kb)
        else:
            await msg.answer_photo(file_url, caption=caption, parse_mode="HTML", reply_markup=kb)

@dp.callback_query(F.data.in_({"result_next", "result_prev"}))
async def cb_result_nav(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data.get("result_idx", 0)
    total = len(data.get('result_posts', []))
    if call.data == "result_next":
        if idx >= total - 1:
            await call.answer("–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        else:
            await state.update_data(result_idx=idx + 1)
            await call.answer()
            await show_result(call, state, edit=True)
    else:
        if idx <= 0:
            await call.answer("—ç—Ç–æ –ø–µ—Ä–≤—ã–π!")
        else:
            await state.update_data(result_idx=idx - 1)
            await call.answer()
            await show_result(call, state, edit=True)

@dp.callback_query(F.data == "result_edit")
async def cb_result_edit(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    await state.set_state(CharFSM.step)
    await state.update_data(step_index=len(func_steps)-1, answers=answers)
    try: await call.message.delete()
    except Exception: pass
    await send_step(call.message, state, preview=True)

@dp.callback_query(F.data == "help_tips")
async def cb_help_tips(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ù–µ –≤—ã–±–∏—Ä–∞–π —Å–ª–∏—à–∫–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ!\n"
        "‚Ä¢ –õ—É—á—à–∞—è –∫–æ–º–±–∞ ‚Äî 2-3 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞.\n"
        "‚Ä¢ –ß–µ–º –ø—Ä–æ—â–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∞—Ä—Ç–æ–≤ –Ω–∞–π–¥—ë—Ç—Å—è üåà.\n"
        "‚Ä¢ –ü—Ä–æ–±—É–π —Ä–∞–Ω–¥–æ–º/–ø—Ä–æ–ø—É—Å–∫ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.\n",
        parse_mode="HTML"
    )
    await call.message.answer("–ñ–º–∏ /start ‚Äî —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")

@dp.callback_query(F.data == "result_extra_tags")
async def cb_result_extra_tags(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(CharFSM.wait_tags)
    await call.message.answer(
        "‚úçÔ∏è <b>–í–ø–∏—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤):</b>\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: blue_eyes smile outdoor</i>",
        parse_mode="HTML"
    )

@dp.message(CharFSM.wait_tags)
async def msg_extra_tags(message: types.Message, state: FSMContext):
    data = await state.get_data()
    extra_tags = message.text.strip()
    if not extra_tags:
        await message.answer("–ü—É—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
        return
    char_creator.char = ""
    answers = data.get('answers', {})
    for i, (group, func) in enumerate(func_steps):
        ans = answers.get(group)
        if ans is not None:
            if isinstance(ans, list):
                for a in ans:
                    func(a)
            else:
                func(ans)
    char_creator.char += " " + extra_tags
    desc = char_creator.get_character()
    posts = []
    for page in range(1, 6):
        chunk = rule34.make_rule34_request(desc, pid=page-1, limit=10)
        if not isinstance(chunk, list) or not chunk:
            break
        posts.extend(chunk)
        if len(posts) >= 50:
            break
    posts = posts[:50]
    await state.set_state(CharFSM.result)
    await state.update_data(result_posts=posts, result_desc=desc, result_idx=0)
    await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å —Ç–µ–≥–∞–º–∏: <code>{extra_tags}</code>", parse_mode="HTML")
    await show_result(message, state)

# --- –ö–û–ú–ê–ù–î–´ ---
@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(CharFSM.step)
    await state.update_data(step_index=0, answers={})
    await send_intro(message)
    await send_step(message, state, preview=True)

@dp.message(Command('reset'))
async def cmd_reset(message: types.Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

@dp.message(Command('cancel'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –∂–º–∏ /start ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±—É–µ–º!")

@dp.message(Command('preview'))
async def cmd_preview(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    char_creator.char = ""
    for i, (group, func) in enumerate(func_steps):
        ans = answers.get(group)
        if ans is not None:
            try: func(ans)
            except Exception: pass
    desc = char_creator.get_character()
    await message.answer(f"üìù <b>—Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{desc or '[–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ]'}</code>", parse_mode="HTML")

@dp.message(Command('help'))
async def cmd_help(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ö°Ô∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n"
        "1. –ù–µ –≤—ã–±–∏—Ä–∞–π –í–°–Å –ø–æ–¥—Ä—è–¥ ‚Äî –±—É–¥–µ—Ç –º–∞–ª–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫!\n"
        "2. –ß–µ–º –ø—Ä–æ—â–µ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –∞—Ä—Ç–æ–≤ (—Ñ–∏—á–∏ —Ç–∏–ø–∞ —Ü–≤–µ—Ç –≤–æ–ª–æ—Å, –æ–¥–µ–∂–¥–∞, –ø–æ–∑–∞ ‚Äî –≤–∞–∂–Ω—ã!)\n"
        "3. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n"
        "4. –ù–∞ –ª—é–±–æ–º —à–∞–≥–µ —Ç—ã–∫–∞–π <b>‚è© –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–ø—É—Å–∫</b>, –µ—Å–ª–∏ –ª–µ–Ω—å.\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å\n"
        "/help ‚Äî –µ—â—ë —Ä–∞–∑ —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É\n"
        "/cancel ‚Äî –≤—ã–π—Ç–∏ ü¶ã",
        parse_mode="HTML"
    )

@dp.message()
async def unknown_cmd(message: types.Message, state: FSMContext):
    await message.answer("üö¶ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –∂–º–∏ /start —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! —à–∞–≥–∞–π –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∞—Ä—Ç–æ–º! üåà")

# --- –°–¢–ê–†–¢ –ü–û–õ–õ–ò–ù–ì–ê ---
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))